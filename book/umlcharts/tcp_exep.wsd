@startuml

class tcp_exep_header {
    +MAX_EXEP: int = 1024
    +ETH_HEADER_SIZE: int = 14
    +ZERO_WINDOW_STR: string = "zero window"
    +RETRANS_STR: string = "retransmission"
    +RESET_STR: string = "reset"
    +DUP_ACK_ATOB_STR: string = "duplicate ack a to b"
    +DUP_ACK_BTOA_STR: string = "duplicate ack b to a"
+get_packet_exep(tcp_packet: u_char*): packet_exep_e
+analyze_packet(tcp_packet: u_char*): packet_flags
+check_dup_ack(crnt: packet_node_s*, comp: packet_node_s*): int
+check_keep_alive(p: packet_node_s*): int

}

enum packet_type_e {
    FIN_P_TYPE = TH_FIN,
    SYN_P_TYPE = TH_SYN,
    RST_P_TYPE = TH_RST,
    PSH_P_TYPE = TH_PUSH,
    ACK_P_TYPE = TH_ACK,
    URG_P_TYPE = TH_URG,
    ZERO_WINDOW_TYPE = 1111,
    ERR_P_TYPE = -1
}

enum packet_exep_e {
    NORMAL_EXEP = 21,
    DUP_ACK_ATOB_EXEP,
    DUP_ACK_BTOA_EXEP,
    ZERO_WINDOW_EXEP,
    TIMEOUT_EXEP,
    RETRANS_EXEP,
    RESET_EXEP,
}

struct packet_node_s {
    - packet_data: u_char*
    - p_id: uint32_t
    - packet_size: size_t
    - packet_type: size_t
    - packet_exep: size_t
    - num_seq: uint32_t
    - num_ack: uint32_t
    - flags: uint8_t
    - win_size: uint16_t
    - src_ip: struct in_addr
    - dest_ip: struct in_addr
    - time_stamp: struct timeval
    - time_stamp_rltv: double
    - next: packet_node_s*
}

enum packet_flags {
    NO_FLAGS = 0,
    FIN_FLAG = 1 << 0,
    SYN_FLAG = 1 << 1,
    RST_FLAG = 1 << 2,
    PSH_FLAG = 1 << 3,
    ACK_FLAG = 1 << 4,
    URG_FLAG = 1 << 5,
    ZERO_WINDOW_FLAG = 1 << 6,
    RETRANS_FLAG = 1 << 7
}

struct packet_exep_node_s {
    - src_ip: struct in_addr
    - dest_ip: struct in_addr
    - exep: packet_exep_e
    - packet_location: uint32_t
}

enum ret_val {
    FAILED = EXIT_FAILURE,
    with_l2l4 = 2,
    with_ddos = 4,
    with_mitm = 8
}

tcp_exep_header -- packet_node_s
tcp_exep_header -- packet_exep_node_s
tcp_exep_header --  ret_val
tcp_exep_header --  packet_flags
tcp_exep_header --  packet_type_e
tcp_exep_header --  packet_exep_e

@enduml
